package com.example.customer;

import com.example.exception.DuplicateResourceException;
import com.example.exception.RequestValidationException;
import com.example.exception.ResourceNotFoundException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.security.crypto.password.PasswordEncoder;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class CustomerServiceTest {

  @Mock
  private CustomerDao customerDao;
  @Mock
  private PasswordEncoder passwordEncoder;
  private CustomerService underTest;

  @BeforeEach
  void setUp() {
    underTest = new CustomerService(customerDao, passwordEncoder);
  }

  @Test
  void canGetAllCustomers() {
    // When
    underTest.getAllCustomers();
    // Then
    verify(customerDao).selectAllCustomers();
  }

  @Test
  void canGetCustomer() {
    // Given
    int customerId = 0;
    Customer customer = new Customer(
        customerId,
        "Bruno",
        "bruno@mail.com",
        "password",
        14,
        Gender.MALE);
    when(customerDao.selectCustomerById(customerId)).thenReturn(Optional.of(customer));
    // When
    Customer actualCustomer = underTest.getCustomer(customerId);
    // Then
    assertThat(actualCustomer).isEqualTo(customer);
  }

  @Test
  void willThrowWhenGetCustomerReturnEmptyOptional() {
    // Given
    int customerId = 0;
    when(customerDao.selectCustomerById(customerId)).thenReturn(Optional.empty());
    // When
    // Then
    assertThatThrownBy(() -> underTest.getCustomer(customerId))
        .isInstanceOf(ResourceNotFoundException.class)
        .hasMessage("Customer with ID %s not found".formatted(customerId));
  }

  @Test
  void canAddCustomer() {
    // Given
    String email = "bruno@mail.com";
    // Bad Path when Email is taken
    when(customerDao.existsCustomerWithEmail(email)).thenReturn(false);
    CustomerRegistrationRequest customerRegistrationRequest = new CustomerRegistrationRequest(
        "Bruno",
        email,
        "password",
        14,
        Gender.MALE);
    String passwordHash = "123";
    when(passwordEncoder.encode(customerRegistrationRequest.password())).thenReturn(passwordHash);
    // When
    underTest.addCustomer(customerRegistrationRequest);
    // Then
    ArgumentCaptor<Customer> customerArgumentCaptor = ArgumentCaptor.forClass(Customer.class);
    verify(customerDao).insertCustomer(customerArgumentCaptor.capture());
    Customer customerArgumentCaptorValue = customerArgumentCaptor.getValue();
    // ID is generated by the database therefore it is null
    assertThat(customerArgumentCaptorValue.getId()).isNull();
    assertThat(customerArgumentCaptorValue.getName()).isEqualTo(customerRegistrationRequest.name());
    assertThat(customerArgumentCaptorValue.getEmail()).isEqualTo(customerRegistrationRequest.email());
    assertThat(customerArgumentCaptorValue.getPassword()).isEqualTo(passwordHash);
    assertThat(customerArgumentCaptorValue.getAge()).isEqualTo(customerRegistrationRequest.age());
  }

  @Test
  void willThrowWhenAddingCustomerWhenEmailExists() {
    // Given
    String email = "bruno@mail.com";
    // Bad Path when Email is taken
    when(customerDao.existsCustomerWithEmail(email)).thenReturn(true);
    CustomerRegistrationRequest customerRegistrationRequest = new CustomerRegistrationRequest(
        "Bruno",
        email,
        "password",
        14,
        Gender.MALE);
    // When
    assertThatThrownBy(() -> underTest.addCustomer(customerRegistrationRequest))
        .isInstanceOf(DuplicateResourceException.class)
        .hasMessage("Email %s already exists".formatted(email));
    // Then
    verify(customerDao, never()).insertCustomer(any());
  }

  @Test
  void canUpdateCustomer() {
    // Given
    int customerId = 10;
    Customer customer = new Customer(
        customerId,
        "Bruno",
        "bruno@mail.com",
        "password",
        14,
        Gender.MALE);
    when(customerDao.selectCustomerById(customerId)).thenReturn(Optional.of(customer));
    String newEmail = "bruns@mail.com";
    CustomerUpdateRequest customerUpdateRequest = new CustomerUpdateRequest("Bruns", newEmail, "password", 15,
        Gender.MALE);
    when(customerDao.existsCustomerWithEmail(newEmail)).thenReturn(false);
    // When
    underTest.updateCustomer(customerId, customerUpdateRequest);
    // Then
    ArgumentCaptor<Customer> customerArgumentCaptor = ArgumentCaptor.forClass(Customer.class);
    verify(customerDao).updateCustomer(customerArgumentCaptor.capture());
    Customer capturedCustomer = customerArgumentCaptor.getValue();
    assertThat(capturedCustomer.getName()).isEqualTo(customerUpdateRequest.name());
    assertThat(capturedCustomer.getEmail()).isEqualTo(customerUpdateRequest.email());
    assertThat(capturedCustomer.getAge()).isEqualTo(customerUpdateRequest.age());
  }

  @Test
  void willThrowWhenTryingToUpdateCustomerEmailWhenAlreadyTaken() {
    // Given
    int customerId = 10;
    Customer customer = new Customer(
        customerId,
        "Bruno",
        "bruno@mail.com",
        "password",
        14,
        Gender.MALE);
    when(customerDao.selectCustomerById(customerId)).thenReturn(Optional.of(customer));
    String newEmail = "bruns@mail.com";
    CustomerUpdateRequest updateRequest = new CustomerUpdateRequest(null, newEmail, null, null, null);
    when(customerDao.existsCustomerWithEmail(newEmail)).thenReturn(true);
    // When
    assertThatThrownBy(() -> underTest.updateCustomer(customerId, updateRequest))
        .isInstanceOf(DuplicateResourceException.class)
        .hasMessage("Email already exists");
    // Then
    verify(customerDao, never()).updateCustomer(any());
  }

  @Test
  void willThrowWhenCustomerUpdateHasNoChanges() {
    // Given
    int customerId = 10;
    Customer customer = new Customer(
        customerId,
        "Bruno",
        "bruno@mail.com",
        "password",
        14,
        Gender.MALE);
    when(customerDao.selectCustomerById(customerId)).thenReturn(Optional.of(customer));
    CustomerUpdateRequest customerUpdateRequest = new CustomerUpdateRequest(
        customer.getName(),
        customer.getEmail(),
        customer.getPassword(),
        customer.getAge(),
        customer.getGender());
    // When
    assertThatThrownBy(() -> underTest.updateCustomer(customerId, customerUpdateRequest))
        .isInstanceOf(RequestValidationException.class)
        .hasMessage("No Customer Data Changes found");
    // Then
    verify(customerDao, never()).updateCustomer(any());
  }

  @Test
  void canRemoveCustomer() {
    // Given
    int customerId = 10;
    when(customerDao.existsCustomerWithId(customerId)).thenReturn(true);
    // When
    underTest.removeCustomer(customerId);
    // Then
    verify(customerDao).removeCustomer(customerId);
  }

  @Test
  void willThrowRemoveCustomerByIdNotExists() {
    // Given
    int customerId = 10;
    when(customerDao.existsCustomerWithId(customerId)).thenReturn(false);
    // When
    assertThatThrownBy(() -> underTest.removeCustomer(customerId))
        .isInstanceOf(ResourceNotFoundException.class)
        .hasMessage("Customer with ID %s not found".formatted(customerId));

    // Then
    verify(customerDao, never()).removeCustomer(customerId);
  }
}